name: Nestjs CI

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
  
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Run tests
        run: npm test

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           # 프로젝트 디렉토리로 이동
  #           cd /home/ubuntu/dockerTest
            
  #           # GitHub에서 최신 코드를 가져옴
  #           git pull origin main
            
  #           # .env 파일 생성
  #           echo "DB_NAME=${{ secrets.DB_NAME }}" > .env
  #           echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env
  #           echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env

  #           # node 관련 환경 설정 가져오기 위해 실행
  #           source /home/ubuntu/.nvm/nvm.sh
  #           # 서버 실행 시크립트 가동!
  #           # source ./run.sh